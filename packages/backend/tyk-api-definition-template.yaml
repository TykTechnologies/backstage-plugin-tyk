apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: tyk-api-definition-template
  title: Tyk API Definition
  description: Creates a Tyk API Defintion
spec:
  owner: user:guest
  type: api

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Core Settings
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Name
          ui:autofocus: true
          ui:options:
            rows: 1
        active:
          title: Active
          type: boolean
          description: Active status
        targetUrl:
          title: Target URL
          type: string
          description: Upstream target

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Custom action to create APIs in the Tyk Dashboard
    - id: push-to-tyk-dashboard
      name: Push to Tyk Dashboard
      action: tyk:api:create
      input:
        name: ${{ parameters.name }}
        active: ${{ parameters.active }}
        targetUrl: ${{ parameters.targetUrl }}

    # Each step executes an action, in this case one templates files into the working directory.
    # - id: fetch-base
    #   name: Fetch Base
    #   action: fetch:template
    #   input:
    #     url: ./content
    #     values:
    #       name: ${{ parameters.name }}

    # This step publishes the contents of the working directory to GitHub.
    # - id: publish
    #   name: Publish
    #   action: publish:github
    #   input:
    #     allowedHosts: ['github.com']
    #     description: This is ${{ parameters.name }}
    #     repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
    #     catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.name }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
